'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildServer = buildServer;

var _babelPresetEnv = require('babel-preset-env');

var _babelPresetEnv2 = _interopRequireDefault(_babelPresetEnv);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _metal = require('metal');

var _jsdom = require('jsdom');

var _jsdom2 = _interopRequireDefault(_jsdom);

var _log = require('../log');

var _log2 = _interopRequireDefault(_log);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _babelCore = require('babel-core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { JSDOM } = _jsdom2.default;
const dom = new JSDOM();

/**
 * Aggregate babel presets.
 * @param {Array} plugins
 * @return {Array}
 */
const aggregateBabelPresets = plugins => {
  let presets = [[_babelPresetEnv2.default, {
    targets: {
      node: 'current'
    }
  }]];
  for (const plugin of plugins) {
    if ((0, _metal.isFunction)(plugin.babelPresets)) {
      presets = presets.concat(plugin.babelPresets());
    }
  }
  return presets;
};

/**
 * Builds server `files` into `outputPath`.
 * @param {!Array.<string>} files
 * @param {string} directory
 * @param {string} outputDirectory
 * @param {!Array} plugins
 * @param {?Array} config
 * @return {Promise}
 */
async function buildServer(files, directory, outputDirectory, plugins = [], config = {}) {
  _log2.default.info(false, 'Building serverâ€¦');

  if (config.magnet && !config.magnet.apiOnly) {
    global.document = dom.window.document;
    global.window = dom.window;
  }

  _fsExtra2.default.removeSync(outputDirectory);
  const presets = aggregateBabelPresets(plugins);

  return new Promise((resolve, reject) => {
    files.forEach(file => {
      try {
        let absoluteSrc = _path2.default.join(directory, file);
        let absoluteDist = _path2.default.join(outputDirectory, file);
        let transform = (0, _babelCore.transformFileSync)(absoluteSrc, {
          presets,
          babelrc: false,
          filename: absoluteSrc,
          filenameRelative: file,
          sourceMaps: 'inline',
          plugins: [['transform-runtime', {
            helpers: false,
            polyfill: false,
            regenerator: true,
            moduleName: 'babel-runtime'
          }]]
        });
        _fsExtra2.default.outputFileSync(absoluteDist, transform.code);
      } catch (error) {
        reject(error);
      }
    });
    resolve();
  });
}