#!/usr/bin/env node
'use strict';

var _routes = require('../routes');

var _ = require('../');

var _log = require('../log');

var _log2 = _interopRequireDefault(_log);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.stdin.pause();

const argv = (0, _minimist2.default)(process.argv.slice(2), {
  alias: {
    h: 'help',
    c: 'config',
    C: 'config-dir'
  },
  boolean: ['h']
});

if (argv.help) {
  console.log(`
    Description
      Builds and starts the application in development mode.
    Usage
      $ magnet dev [-c <config file path>] [-C <config dir>]
    Options
      --config, -c        Config file path [default: magnet.config.js]
      --config-dir, -C    Directory to load configuration files from
      --help, -h          Displays this message
  `);
  process.exit(0);
}

const config = argv['config'];
const configDir = argv['config-dir'];
const directory = process.cwd();
const magnet = new _.Magnet({ config, configDir, directory });

magnet.build().then(() => {
  const routes = (0, _routes.getRoutesTable)(magnet);
  if (routes) {
    _log2.default.infoNoPrefix(false, `\n${routes}\n`);
  }
}).then(() => magnet.start()).catch(error => {
  if (error.code === 'EADDRINUSE') {
    const errorMessage = `Port ${argv.port} is already in use.`;
    _log2.default.error(false, errorMessage);
  } else {
    _log2.default.error(false, error);
  }
  process.nextTick(() => process.exit(1));
});

process.on('SIGTERM', error => {
  if (magnet) magnet.stop();
});

process.on('SIGINT', error => {
  if (magnet) magnet.stop();
  process.nextTick(() => process.exit(1));
});