#!/usr/bin/env node
'use strict';

var _path = require('path');

var _ = require('../');

var _crossSpawn = require('cross-spawn');

var _chokidar = require('chokidar');

var _chokidar2 = _interopRequireDefault(_chokidar);

var _log = require('../log');

var _log2 = _interopRequireDefault(_log);

var _package = require('../../package.json');

var _package2 = _interopRequireDefault(_package);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultCommand = 'dev';
const commands = new Set([defaultCommand, 'start', 'build', 'generate', 'routes']);

let cmd = process.argv[2];
let args;

if (new Set(['--version', '-v']).has(cmd)) {
  console.log(`magnet.js v${_package2.default.version}`);
  process.exit(0);
}

if (new Set(['--help', '-h']).has(cmd)) {
  console.log(`
    Usage
      $ magnet <command>

    Available commands
      ${Array.from(commands).join(', ')}

    For more information run a command with the --help flag
      $ magnet start --help
  `);
  process.exit(0);
}

if (commands.has(cmd)) {
  args = process.argv.slice(3);
} else {
  cmd = defaultCommand;
  args = process.argv.slice(2);
}

const bin = (0, _path.join)(__dirname, 'magnet-' + cmd);

let childApp;
let isWatcherInitialized = false;

if (cmd === 'dev') {
  process.env.NODE_ENV = process.env.NODE_ENV || 'development';

  const aliasArgs = (0, _minimist2.default)(args, {
    alias: {
      c: 'config',
      C: 'config-dir'
    }
  });
  const config = aliasArgs['config'];
  const configDir = aliasArgs['config-dir'];
  const directory = process.cwd();
  const magnetConfig = _.Magnet.resolveConfig(directory, config, configDir, false);

  const watcher = _chokidar2.default.watch('**/*', {
    awaitWriteFinish: true,
    cwd: process.cwd(),
    ignored: /node_modules|\.magnet|\.git|\.soy\.js/,
    ignoreInitial: true
  });

  watcher.unwatch(magnetConfig.magnet.ignore);

  watcher.on('add', restartApp);
  watcher.on('change', restartApp);
  watcher.on('unlink', restartApp);

  watcher.on('ready', () => {
    if (!isWatcherInitialized) {
      startChildApp();
      isWatcherInitialized = true;
    }
  });

  process.on('SIGINT', function () {
    watcher.close();
    process.exit(1);
  });
} else {
  startChildApp();
}

/**
 * Restart current cli app.
 */
function restartApp() {
  if (childApp) {
    _log2.default.info(false, 'Found a change, restarting the serverâ€¦');
    childApp.on('exit', () => startChildApp());
    killApp();
  } else {
    startChildApp();
  }
}

/**
 * Kills app.
 */
function killApp() {
  childApp.removeAllListeners('close');
  try {
    childApp.kill('SIGHUP');
  } catch (error) {
    childApp.kill('SIGKILL');
  }
  childApp = undefined;
}

/**
 * Spawns new child app.
 */
function startChildApp() {
  childApp = (0, _crossSpawn.spawn)(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });
  childApp.on('close', (code, signal) => {
    if (code !== null) {
      process.exit(code);
    }
    if (signal) {
      if (signal === 'SIGKILL') {
        process.exit(137);
      }
      _log2.default.info(false, 'exiting');
      process.exit(1);
    }
    process.exit(0);
  });
  childApp.on('error', err => {
    _log2.default.error(false, err);
    process.exit(1);
  });
}